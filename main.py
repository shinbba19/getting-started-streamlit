import streamlit as st
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
import altair as alt

# --------------------------------------------------
# Initialize Session State
# --------------------------------------------------
if "deals" not in st.session_state:
    st.session_state.deals = []

# --------------------------------------------------
# Sidebar Menu
# --------------------------------------------------
menu = [
    "Home",
    "Owner Dashboard",
    "Investor Dashboard",
    "Deal Summary",
    "Data Dashboard",
    "Price Prediction"
]
choice = st.sidebar.selectbox("Menu", menu)

# --------------------------------------------------
# 1) Home
# --------------------------------------------------
if choice == "Home":
    st.title("üè† P2P ‡∏Ç‡∏≤‡∏¢‡∏ù‡∏≤‡∏Å Platform (Prototype)")
    st.write("""
    Prototype ‡∏ô‡∏µ‡πâ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö P2P ‡∏Ç‡∏≤‡∏¢‡∏ù‡∏≤‡∏Å‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ **(‡πÑ‡∏°‡πà‡∏°‡∏µ blockchain, ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á login)**  

    üîπ Features:
    - ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå: ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≤‡∏¢‡∏ù‡∏≤‡∏Å  
    - ‡∏ô‡∏±‡∏Å‡∏•‡∏á‡∏ó‡∏∏‡∏ô: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏ô‡∏î‡∏µ‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à  
    - Dashboard: ‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏•‡∏≤‡∏î‡∏à‡∏£‡∏¥‡∏á  
    - Model: ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏î‡πâ‡∏ß‡∏¢ Random Forest  
    """)

# --------------------------------------------------
# 2) Owner Dashboard
# --------------------------------------------------
elif choice == "Owner Dashboard":
    st.header("üìå ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏î‡∏µ‡∏•‡∏Ç‡∏≤‡∏¢‡∏ù‡∏≤‡∏Å")
    with st.form("owner_form"):
        property_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô (‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏î‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó 40)")
        location = st.text_input("‡∏ó‡∏≥‡πÄ‡∏•/‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á")
        price = st.number_input("‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≤‡∏¢‡∏ù‡∏≤‡∏Å (‡∏ö‡∏≤‡∏ó)", min_value=100000, step=50000)
        duration = st.selectbox("‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ñ‡πà‡∏ñ‡∏≠‡∏ô", ["6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", "1 ‡∏õ‡∏µ", "2 ‡∏õ‡∏µ"])
        submitted = st.form_submit_button("‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏î‡∏µ‡∏•")

        if submitted:
            deal = {
                "property": property_name,
                "location": location,
                "price": price,
                "duration": duration,
                "status": "‡∏£‡∏≠‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà"
            }
            st.session_state.deals.append(deal)
            st.success("‚úÖ ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏î‡∏µ‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

# --------------------------------------------------
# 3) Investor Dashboard
# --------------------------------------------------
elif choice == "Investor Dashboard":
    st.header("üí∞ ‡∏ô‡∏±‡∏Å‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏µ‡∏•")
    if len(st.session_state.deals) == 0:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏î‡∏µ‡∏•‡∏ó‡∏µ‡πà‡πÇ‡∏û‡∏™‡∏ï‡πå")
    else:
        for i, deal in enumerate(st.session_state.deals):
            with st.expander(f"‡∏î‡∏µ‡∏• {i+1}: {deal['property']}"):
                st.write(f"üìç {deal['location']}")
                st.write(f"üíµ {deal['price']:,} ‡∏ö‡∏≤‡∏ó")
                st.write(f"‚è≥ {deal['duration']}")
                if st.button(f"‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏ô‡∏î‡∏µ‡∏• {i+1}", key=f"invest_{i}"):
                    st.session_state.deals[i]["status"] = "‡∏°‡∏µ‡∏ô‡∏±‡∏Å‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‚úÖ"
                    st.success(f"‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏ô {deal['property']}")

# --------------------------------------------------
# 4) Deal Summary
# --------------------------------------------------
elif choice == "Deal Summary":
    st.header("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏î‡∏µ‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    if len(st.session_state.deals) > 0:
        df = pd.DataFrame(st.session_state.deals)
        st.dataframe(df)
    else:
        st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏î‡∏µ‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")

# --------------------------------------------------
# 5) Data Dashboard
# --------------------------------------------------
elif choice == "Data Dashboard":
    st.header("üìä Data Dashboard (‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ß‡∏°)")

    df = pd.read_csv("Price per sqm_cleaned_data_selection2.csv")

    # Sidebar Filters
    st.sidebar.subheader("üîç ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    district_options = sorted(df["district_type"].unique())
    selected_district = st.sidebar.multiselect(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ã‡∏ô‡∏ó‡∏≥‡πÄ‡∏• (district_type)", district_options, default=district_options
    )
    age_min, age_max = int(df["bld_age"].min()), int(df["bld_age"].max())
    age_range = st.sidebar.slider("‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ (‡∏õ‡∏µ)", age_min, age_max, (age_min, age_max))
    price_min, price_max = int(df["price_sqm"].min()), int(df["price_sqm"].max())
    price_range = st.sidebar.slider("‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏ï‡∏£.‡∏°.", price_min, price_max, (price_min, price_max))

    # Apply Filters
    filtered_df = df[
        (df["district_type"].isin(selected_district)) &
        (df["bld_age"].between(age_range[0], age_range[1])) &
        (df["price_sqm"].between(price_range[0], price_range[1]))
    ]

    st.subheader("üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Å‡∏£‡∏≠‡∏á")
    st.write(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {len(filtered_df)}")
    st.dataframe(filtered_df.head(20))

    # Chart 1: Distribution of Price
    st.subheader("üìà ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏ï‡∏£.‡∏°.")
    chart1 = alt.Chart(filtered_df).mark_bar().encode(
        alt.X("price_sqm", bin=alt.Bin(maxbins=50), title="‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏ï‡∏£.‡∏°."),
        y='count()'
    )
    st.altair_chart(chart1, use_container_width=True)

    # Chart 2: Age vs Price
    st.subheader("üèóÔ∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤")
    chart2 = alt.Chart(filtered_df).mark_circle(size=60, opacity=0.5).encode(
        x=alt.X("bld_age", title="‡∏≠‡∏≤‡∏¢‡∏∏‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ (‡∏õ‡∏µ)"),
        y=alt.Y("price_sqm", title="‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏ï‡∏£.‡∏°."),
        color="district_type:N",
        tooltip=["bld_age", "price_sqm", "district_type"]
    )
    st.altair_chart(chart2, use_container_width=True)

    # Chart 3: Facilities Impact (Pool)
    st.subheader("üèä ‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢")
    facility_chart = filtered_df.groupby("Pool")["price_sqm"].mean().reset_index()
    chart3 = alt.Chart(facility_chart).mark_bar().encode(
        x="Pool:N",
        y="price_sqm:Q"
    )
    st.altair_chart(chart3, use_container_width=True)

# --------------------------------------------------
# 6) Price Prediction
# --------------------------------------------------
elif choice == "Price Prediction":
    st.header("üìà ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏î‡πâ‡∏ß‡∏¢ Random Forest (‡∏à‡∏≤‡∏Å Dataset ‡∏à‡∏£‡∏¥‡∏á)")

    df = pd.read_csv("Price per sqm_cleaned_data_selection2.csv")

    features = [
        "bld_age", "nbr_floors", "Aver_trans", "district_type",
        "Pool", "Gym", "Parking", "Elevator", "Security",
        "Aver_food", "Aver_school", "Aver_shop", "hospital"
    ]
    df = df.dropna(subset=features + ["price_sqm"])
    X = df[features]
    y = df["price_sqm"]

    # Train Model
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42
    )
    model = RandomForestRegressor(n_estimators=300, random_state=42)
    model.fit(X_train, y_train)

    # Evaluate Model
    y_pred = model.predict(X_test)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred, squared=False)

    st.subheader("üìä ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•")
    st.write(f"**R¬≤ Score:** {r2:.2f}")
    st.write(f"**MAE:** {mae:,.0f} ‡∏ö‡∏≤‡∏ó/‡∏ï‡∏£.‡∏°.")
    st.write(f"**RMSE:** {rmse:,.0f} ‡∏ö‡∏≤‡∏ó/‡∏ï‡∏£.‡∏°.")

    # User Input
    st.subheader("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
    size = st.number_input("‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡πâ‡∏≠‡∏á (‡∏ï‡∏£.‡∏°.)", 20, 200, 35)
    age = st.number_input("‡∏≠‡∏≤‡∏¢‡∏∏‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ (‡∏õ‡∏µ)", 0, 40, 10)
    floor = st.number_input("‡∏ä‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà", 1, 60, 5)
    distance = st.number_input("‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å BTS (‡∏Å‡∏°.)", 0.0, 15.0, 1.0, step=0.1)

    # Preset Options
    district = st.selectbox("‡πÇ‡∏ã‡∏ô‡∏ó‡∏≥‡πÄ‡∏• (district_type)", sorted(df["district_type"].unique()))
    pool = st.checkbox("‡∏°‡∏µ‡∏™‡∏£‡∏∞‡∏ß‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≥", value=True)
    gym = st.checkbox("‡∏°‡∏µ‡∏¢‡∏¥‡∏°", value=True)
    parking = st.checkbox("‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏î‡∏£‡∏ñ", value=True)
    elevator = st.checkbox("‡∏°‡∏µ‡∏•‡∏¥‡∏ü‡∏ï‡πå", value=True)
    security = st.checkbox("‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢", value=True)

    avg_food = st.slider("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏£‡∏≠‡∏ö‡πÜ (0-1)", 0.0, 1.0, float(df["Aver_food"].mean()))
    avg_school = st.slider("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏≠‡∏ö‡πÜ (0-1)", 0.0, 1.0, float(df["Aver_school"].mean()))
    avg_shop = st.slider("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤/‡∏´‡πâ‡∏≤‡∏á‡∏£‡∏≠‡∏ö‡πÜ (0-1)", 0.0, 1.0, float(df["Aver_shop"].mean()))
    hospital = st.slider("‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• (‡∏Å‡∏°.)", 0.0, 5.0, float(df["hospital"].mean()))

    if st.button("‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤"):
        X_new = np.array([[
            age, floor, distance, district,
            int(pool), int(gym), int(parking), int(elevator), int(security),
            avg_food, avg_school, avg_shop, hospital
        ]])
        pred_price_sqm = model.predict(X_new)[0]
        total_price = pred_price_sqm * size

        st.success(f"üè∑Ô∏è ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏ï‡∏£.‡∏°. ‚âà {pred_price_sqm:,.0f} ‡∏ö‡∏≤‡∏ó")
        st.success(f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏£‡∏ß‡∏° ‚âà {total_price:,.0f} ‡∏ö‡∏≤‡∏ó")

        # Feature Importance
        st.subheader("üîé ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ (Feature Importance)")
        fi = pd.DataFrame({
            "Feature": features,
            "Importance": model.feature_importances_
        }).sort_values(by="Importance", ascending=False)
        st.bar_chart(fi.set_index("Feature"))
