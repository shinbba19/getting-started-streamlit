import streamlit as st
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
import altair as alt

# --------------------------------------------------
# Sidebar Menu
# --------------------------------------------------
menu = ["Data Dashboard", "Price Prediction"]
choice = st.sidebar.selectbox("Menu", menu)

# --------------------------------------------------
# 1) Data Dashboard
# --------------------------------------------------
if choice == "Data Dashboard":
    st.header("üìä Data Dashboard (‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ß‡∏°)")

    # Load dataset
    df = pd.read_csv("Price per sqm_cleaned_data_selection2.csv")

    # Sidebar Filters
    st.sidebar.subheader("üîç ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    district_options = sorted(df["district_type"].unique())
    selected_district = st.sidebar.multiselect(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ã‡∏ô‡∏ó‡∏≥‡πÄ‡∏• (district_type)", district_options, default=district_options
    )
    age_min, age_max = int(df["bld_age"].min()), int(df["bld_age"].max())
    age_range = st.sidebar.slider("‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ (‡∏õ‡∏µ)", age_min, age_max, (age_min, age_max))
    price_min, price_max = int(df["price_sqm"].min()), int(df["price_sqm"].max())
    price_range = st.sidebar.slider("‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏ï‡∏£.‡∏°.", price_min, price_max, (price_min, price_max))

    # Apply Filters
    filtered_df = df[
        (df["district_type"].isin(selected_district)) &
        (df["bld_age"].between(age_range[0], age_range[1])) &
        (df["price_sqm"].between(price_range[0], price_range[1]))
    ]

    # KPI Summary
    st.subheader("üìå ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (KPI Overview)")
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏ø/‡∏ï‡∏£.‡∏°.)", f"{filtered_df['price_sqm'].mean():,.0f}")
    with col2:
        st.metric("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (‡∏ø/‡∏ï‡∏£.‡∏°.)", f"{filtered_df['price_sqm'].max():,.0f}")
    with col3:
        st.metric("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î (‡∏ø/‡∏ï‡∏£.‡∏°.)", f"{filtered_df['price_sqm'].min():,.0f}")
    with col4:
        st.metric("‡∏≠‡∏≤‡∏¢‡∏∏‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏õ‡∏µ)", f"{filtered_df['bld_age'].mean():.1f}")

    st.write("---")

    # Filtered Data
    st.subheader("üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Å‡∏£‡∏≠‡∏á")
    st.write(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {len(filtered_df)}")
    st.dataframe(filtered_df.head(20))

    # Chart 1: Distribution of Price
    st.subheader("üìà ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏ï‡∏£.‡∏°.")
    chart1 = alt.Chart(filtered_df).mark_bar().encode(
        alt.X("price_sqm", bin=alt.Bin(maxbins=50), title="‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏ï‡∏£.‡∏°."),
        y='count()'
    )
    st.altair_chart(chart1, use_container_width=True)

    # Chart 2: Age vs Price
    st.subheader("üèóÔ∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤")
    chart2 = alt.Chart(filtered_df).mark_circle(size=60, opacity=0.5).encode(
        x=alt.X("bld_age", title="‡∏≠‡∏≤‡∏¢‡∏∏‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ (‡∏õ‡∏µ)"),
        y=alt.Y("price_sqm", title="‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏ï‡∏£.‡∏°."),
        color="district_type:N",
        tooltip=["bld_age", "price_sqm", "district_type"]
    )
    st.altair_chart(chart2, use_container_width=True)

    # Chart 3: Distance to BTS vs Price
    st.subheader("üöâ ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å BTS ‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏ï‡∏£.‡∏°.")
    chart3 = alt.Chart(filtered_df).mark_circle(size=60, opacity=0.6).encode(
        x=alt.X("Aver_trans", title="‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å BTS (‡∏Å‡∏°.)"),
        y=alt.Y("price_sqm", title="‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏ï‡∏£.‡∏°."),
        color="district_type:N",
        tooltip=["Aver_trans", "price_sqm", "district_type", "bld_age"]
    )
    st.altair_chart(chart3, use_container_width=True)

    # Chart 4: District vs Average Price
    st.subheader("üèôÔ∏è ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡∏≤‡∏° District")
    district_chart = filtered_df.groupby("district_type")["price_sqm"].mean().reset_index()
    chart4 = alt.Chart(district_chart).mark_bar().encode(
        x="district_type:N",
        y="price_sqm:Q"
    )
    st.altair_chart(chart4, use_container_width=True)

    # Chart 5: Facilities Impact (Pool)
    st.subheader("üèä ‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (Pool)")
    facility_chart = filtered_df.groupby("Pool")["price_sqm"].mean().reset_index()
    chart5 = alt.Chart(facility_chart).mark_bar().encode(
        x="Pool:N",
        y="price_sqm:Q"
    )
    st.altair_chart(chart5, use_container_width=True)

# --------------------------------------------------
# 2) Price Prediction
# --------------------------------------------------
elif choice == "Price Prediction":
    st.header("üìà ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏î‡πâ‡∏ß‡∏¢ Random Forest (‡∏à‡∏≤‡∏Å Dataset ‡∏à‡∏£‡∏¥‡∏á)")

    # Load dataset
    df = pd.read_csv("Price per sqm_cleaned_data_selection2.csv")

    # Features
    features = [
        "bld_age", "nbr_floors", "Aver_trans", "district_type",
        "Pool", "Gym", "Parking", "Elevator", "Security",
        "Aver_food", "Aver_school", "Aver_shop", "hospital"
    ]
    df = df.dropna(subset=features + ["price_sqm"])
    X = df[features]
    y = df["price_sqm"]

    # Train Model
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42
    )
    model = RandomForestRegressor(n_estimators=300, random_state=42)
    model.fit(X_train, y_train)

    # Evaluate Model
    y_pred = model.predict(X_test)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred, squared=False)

    st.subheader("üìä ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•")
    st.write(f"**R¬≤ Score:** {r2:.2f}")
    st.write(f"**MAE:** {mae:,.0f} ‡∏ö‡∏≤‡∏ó/‡∏ï‡∏£.‡∏°.")
    st.write(f"**RMSE:** {rmse:,.0f} ‡∏ö‡∏≤‡∏ó/‡∏ï‡∏£.‡∏°.")

    # ---------------- User Input ----------------
    st.subheader("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
    size = st.number_input("‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡πâ‡∏≠‡∏á (‡∏ï‡∏£.‡∏°.)", 20, 200, 35)
    age = st.number_input("‡∏≠‡∏≤‡∏¢‡∏∏‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ (‡∏õ‡∏µ)", 0, 40, 10)
    floor = st.number_input("‡∏ä‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà", 1, 60, 5)
    distance = st.number_input("‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å BTS (‡∏Å‡∏°.)", 0.0, 15.0, 1.0, step=0.1)
    district = st.selectbox("‡πÇ‡∏ã‡∏ô‡∏ó‡∏≥‡πÄ‡∏• (district_type)", sorted(df["district_type"].unique()))

    # Preset options (‡∏Ñ‡πà‡∏≤ default)
    pool, gym, parking, elevator, security = 1, 1, 1, 1, 1
    avg_food = float(df["Aver_food"].mean())
    avg_school = float(df["Aver_school"].mean())
    avg_shop = float(df["Aver_shop"].mean())
    hospital = float(df["hospital"].mean())

    if st.button("‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤"):
        X_new = np.array([[
            age, floor, distance, district,
            pool, gym, parking, elevator, security,
            avg_food, avg_school, avg_shop, hospital
        ]])
        pred_price_sqm = model.predict(X_new)[0]
        total_price = pred_price_sqm * size

        st.success(f"üè∑Ô∏è ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏ï‡∏£.‡∏°. ‚âà {pred_price_sqm:,.0f} ‡∏ö‡∏≤‡∏ó")
        st.success(f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏£‡∏ß‡∏° ‚âà {total_price:,.0f} ‡∏ö‡∏≤‡∏ó")

        # Feature Importance
        st.subheader("üîé ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ (Feature Importance)")
        fi = pd.DataFrame({
            "Feature": features,
            "Importance": model.feature_importances_
        }).sort_values(by="Importance", ascending=False)
        st.bar_chart(fi.set_index("Feature"))
